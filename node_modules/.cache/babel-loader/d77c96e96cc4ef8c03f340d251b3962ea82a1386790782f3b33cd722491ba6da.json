{"ast":null,"code":"var _jsxFileName = \"/home/wandi/Downloads/Telegram Desktop/Membership/src/com/Notfication.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Lottie from \"lottie-react\";\nimport not from \"../assets/not.json\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notification = () => {\n  _s();\n  const [category, setCategory] = useState([]);\n  const [username, setUsername] = useState([]);\n  const [game_id, setGame_id] = useState([]);\n  const [price, setPrice] = useState([]);\n  useEffect(() => {\n    axios.get(\"http://localhost:3002/api/winner/getAllWinners\").then(response => {\n      let datas = response.data.winners;\n      console.log(\"reponse is :\", datas);\n      // setCategory(response.data.category);\n      // setUsername(response.data.username);\n      // setGame_id(response.data.game_id);\n      // setWinningNumber(response.data.winning_number);\n      if (Array.isArray(datas)) {\n        console.log(\"yest it is an array\");\n        datas.map(data => {\n          setCategory(prevCategory => [...prevCategory, data.category_id]);\n          setGame_id(data.game_id);\n          setPrice(data.prize_amount);\n          console.log(\"value\", data.category_id);\n        });\n        console.log(\"mapping ....\");\n        console.log(\"maped value for category\", category);\n        console.log(\"maped value for game\", game_id);\n        console.log(\"maped value for price\", price);\n\n        // console.log(\"selectedNumbers : \", selectedNumbers);\n        // // Extract the chosen numbers from the selectedNumbers array\n        // const newNumbers = selectedNumbers.map(selectedNumber => selectedNumber.choisedNumber);\n        // console.log(\"inside the array\");\n        // // Filter out numbers that are already present in choisedNumbers\n        // const uniqueNewNumbers = newNumbers.filter(number => !choisedNumbers.includes(number));\n\n        // // Update choisedNumbers state with the unique numbers\n        // setChoisedNumbers(prevNumbers => [...prevNumbers, ...uniqueNewNumbers]);\n      } else {\n        console.log(\"selectedNumbers is not an array\");\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute top-10 pr-5 right-0\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-[#020917] border-2 border-orange-500 flex flex-col items-center justify-center mt-8 rounded-lg p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-32 h-32 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Lottie, {\n          animationData: not\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), \"(\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap flex-col h-50 overflow-y-visible justify-center\",\n        children: sampleData.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-100 p-4 rounded-lg mb-4 w-64 text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-xl font-bold leading-none text-gray-900 dark:text-white\",\n            children: [\"Category: \", item.category]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm font-medium text-gray-900 dark:text-white\",\n            children: [\"Username: \", item.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm font-medium text-gray-900 dark:text-white\",\n            children: [\"Game ID: \", item.game_id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm font-medium text-gray-900 dark:text-white\",\n            children: [\"Selected: \", item.selected]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm font-medium text-gray-900 dark:text-white\",\n            children: [\"Winner: \", item.winner]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), \");\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Notification, \"hmSSF6aBR6HDevipGXYvZ4r+3kw=\");\n_c = Notification;\nconst sampleData = [{\n  username: \"user1\",\n  category: \"Category 1\",\n  game_id: \"123\",\n  selected: \"Loss\",\n  winner: \"\"\n}, {\n  username: \"user2\",\n  category: \"Category 3\",\n  game_id: \"456\",\n  selected: \"Win\",\n  winner: \"user2\"\n}, {\n  username: \"user3\",\n  category: \"Category 2\",\n  game_id: \"789\",\n  selected: \"Loss\",\n  winner: \"\"\n}];\nexport default Notification;\nvar _c;\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"names":["React","useEffect","useState","Lottie","not","axios","jsxDEV","_jsxDEV","Notification","_s","category","setCategory","username","setUsername","game_id","setGame_id","price","setPrice","get","then","response","datas","data","winners","console","log","Array","isArray","map","prevCategory","category_id","prize_amount","catch","error","className","children","animationData","fileName","_jsxFileName","lineNumber","columnNumber","sampleData","item","index","selected","winner","_c","$RefreshReg$"],"sources":["/home/wandi/Downloads/Telegram Desktop/Membership/src/com/Notfication.jsx"],"sourcesContent":["import React,{useEffect,useState} from \"react\";\r\nimport Lottie from \"lottie-react\";\r\nimport not from \"../assets/not.json\";\r\nimport axios from \"axios\";\r\n\r\nconst Notification = () => {\r\n  const [category, setCategory] = useState([]);\r\n  const [username, setUsername] = useState([]);\r\n  const [game_id, setGame_id] = useState([]);\r\n  const [price, setPrice] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    axios.get(\"http://localhost:3002/api/winner/getAllWinners\").then((response)=>{\r\n      let datas=response.data.winners\r\n      console.log(\"reponse is :\",datas);\r\n      // setCategory(response.data.category);\r\n      // setUsername(response.data.username);\r\n      // setGame_id(response.data.game_id);\r\n      // setWinningNumber(response.data.winning_number);\r\n      if (Array.isArray(datas)) {\r\n        console.log(\"yest it is an array\");\r\n        datas.map((data)=>{\r\n          setCategory(prevCategory => [...prevCategory,data.category_id])\r\n          setGame_id(data.game_id)\r\n          setPrice(data.prize_amount)\r\n          console.log(\"value\",data.category_id);\r\n        })\r\n        console.log(\"mapping ....\");\r\n\r\n \r\n        console.log(\"maped value for category\",category);\r\n        console.log(\"maped value for game\",game_id);\r\n        console.log(\"maped value for price\",price);\r\n\r\n        // console.log(\"selectedNumbers : \", selectedNumbers);\r\n        // // Extract the chosen numbers from the selectedNumbers array\r\n        // const newNumbers = selectedNumbers.map(selectedNumber => selectedNumber.choisedNumber);\r\n        // console.log(\"inside the array\");\r\n        // // Filter out numbers that are already present in choisedNumbers\r\n        // const uniqueNewNumbers = newNumbers.filter(number => !choisedNumbers.includes(number));\r\n        \r\n        // // Update choisedNumbers state with the unique numbers\r\n        // setChoisedNumbers(prevNumbers => [...prevNumbers, ...uniqueNewNumbers]);\r\n      }else{\r\n        console.log(\"selectedNumbers is not an array\");\r\n      }\r\n      \r\n    }).catch((error)=>{\r\n      console.error(error);\r\n    })\r\n\r\n\r\n  },[])\r\n  return (\r\n    <div className=\"absolute top-10 pr-5 right-0\">\r\n      <div className=\"bg-[#020917] border-2 border-orange-500 flex flex-col items-center justify-center mt-8 rounded-lg p-6\">\r\n        {/* Lottie animation */}\r\n        <div className=\"w-32 h-32 mb-4\">\r\n          <Lottie animationData={not} />\r\n        </div>\r\n        {/* Category 1 */}(\r\n        <div className=\"flex flex-wrap flex-col h-50 overflow-y-visible justify-center\">\r\n          {sampleData.map((item, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"bg-gray-100 p-4 rounded-lg mb-4 w-64 text-center\"\r\n            >\r\n              <h5 className=\"text-xl font-bold leading-none text-gray-900 dark:text-white\">\r\n                Category: {item.category}\r\n              </h5>\r\n\r\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                Username: {item.username}\r\n              </p>\r\n\r\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                Game ID: {item.game_id}\r\n              </p>\r\n\r\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                Selected: {item.selected}\r\n              </p>\r\n\r\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                Winner: {item.winner}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        );\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst sampleData = [\r\n  {\r\n    username: \"user1\",\r\n    category: \"Category 1\",\r\n    game_id: \"123\",\r\n    selected: \"Loss\",\r\n    winner: \"\",\r\n  },\r\n  {\r\n    username: \"user2\",\r\n    category: \"Category 3\",\r\n    game_id: \"456\",\r\n    selected: \"Win\",\r\n    winner: \"user2\",\r\n  },\r\n  {\r\n    username: \"user3\",\r\n    category: \"Category 2\",\r\n    game_id: \"789\",\r\n    selected: \"Loss\",\r\n    winner: \"\",\r\n  },\r\n];\r\nexport default Notification;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}